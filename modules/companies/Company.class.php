<?php
	require_once('Core.class.php');

	class Company extends Core
	{
		public function __construct($id=0){
			$this->table  = "companies";
			$this->obj_type = "Company";
			$this->id_field = NULL;
			$this->req_fields = array("name", "code", "last_update_by");
			$this->opt_fields = array();
			$this->func_fields = NULL;
			$this->insert_fields = array("created_by" => "POST");
			$this->list_fields = array("id", "name");
			$this->load_fields = array("id", "name", "code");
			$this->noDuplicates = array("name");
			$this->max_per_page = 20;
			$this->joins = NULL;
			$this->id = $id;
			if($id > 0) $this->load();
		}

    public function checkCompanyCode($company, $code) {
      $db = DBManager::getConnection();
      $company = $db->real_escape_string(trim($company));
      $code = $db->real_escape_string(trim($code));
			$today = date('Y-m-d');

      $where = "WHERE name = '{$company}' and code = '{$code}' and expiration > '{$today}'";

      $this->sql = "SELECT * FROM {$this->table} {$where}";

      $this->execSql("List of Companies", SELECT_MULTI);
    }

    public function createAuthToken($payload) {
      // Use Json Web Tokens to authenticate company

      // KEY - password that validates Signature
      $key = 'Drively-Test-Api';

      //setting the header: 'alg' => 'HS256' indicates that this token is signed using HMAC-SHA256
      $header= [
        'typ' => 'JWT',
        'alg' => 'HS256'
      ];

      // JWT Header
      // Returns the JSON representation of the header
      $header = json_encode($header);

      //encodes the $header with base64.
      $header = base64_encode($header);

      // JWT Payload
      $payload = json_encode($payload);
      $payload = base64_encode($payload);

      // concat header and payload
      $headerPayload = $header.$payload;

      // JWT Signature
      $signature = hash_hmac('sha256', $headerPayload, $key, false);
      $signature = base64_encode($signature);
      $token = "$header.$payload.$signature";

      return $token;
    }

		public function isTokenExpired($token) {
			$today = date('Y-m-d');

			$token_values = explode('.', $token);
			$payload = $token_values[1];
			$payload = base64_decode($payload);
			$payload = json_decode($payload);
			$expiration = $payload[0]->expiration;

			if($today > $expiration) {
				return 1;
			} else {
				return 0;
			}
		}

    public function  verifyAuthToken($token) {
      $key = 'Drively-Test-Api';

      // Split a string by '.'
      $token_values = explode('.', $token);

      // Extract Signature from JWT
      $initial_signature = $token_values[2];

      // concatenating the first two arguments of the $token_Values array, representing the header and the payload
      $headerPayload = $token_values[0].$token_values[1];

      // creating the Base 64 encoded new signature generated by applying the HMAC method to the concatenated header and payload values
      $result_signature = hash_hmac('sha256', $headerPayload, $key, false);
			$result_signature = base64_encode($result_signature);

      // check if initial signature matches reconstructed signature
      if($initial_signature == $result_signature) {
        return 1;
      } else {
        return 0;
      }
    }

		public function getCompanyFromToken($token) {
      $token_values = explode('.', $token);
			$payload = $token_values[1];
			$payload = base64_decode($payload);
			$payload = json_decode($payload);
			return $payload[0];
		}

	}
